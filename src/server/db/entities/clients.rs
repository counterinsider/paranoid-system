//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "clients")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub uuid: String,
    #[sea_orm(column_type = "Text")]
    pub ek_cert: String,
    #[sea_orm(column_type = "Text")]
    pub ek_pub: String,
    #[sea_orm(column_type = "Text")]
    pub ak: String,
    #[sea_orm(column_type = "Text")]
    pub totp_secret: String,
    #[sea_orm(column_type = "Timestamp")]
    pub enrolled_at: DateTime<Utc>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::attestation_nonce::Entity")]
    AttestationNonce,
    #[sea_orm(has_one = "super::attestation_session::Entity")]
    AttestationSession,
    #[sea_orm(has_many = "super::baseline::Entity")]
    Baseline,
    #[sea_orm(has_one = "super::poweron::Entity")]
    Poweron,
    #[sea_orm(has_one = "super::push_session::Entity")]
    PushSession,
    #[sea_orm(has_many = "super::secured_payload::Entity")]
    SecuredPayload,
}

impl Related<super::attestation_nonce::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttestationNonce.def()
    }
}

impl Related<super::attestation_session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttestationSession.def()
    }
}

impl Related<super::baseline::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Baseline.def()
    }
}

impl Related<super::poweron::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poweron.def()
    }
}

impl Related<super::push_session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PushSession.def()
    }
}

impl Related<super::secured_payload::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecuredPayload.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
