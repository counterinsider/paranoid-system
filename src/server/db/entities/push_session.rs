//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "push_session")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub uuid: String,
    pub baseline_id: i32,
    #[sea_orm(column_type = "Timestamp")]
    pub opened_at: DateTime<Utc>,
    #[sea_orm(column_type = "Text")]
    pub session_nonce: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::baseline::Entity",
        from = "Column::BaselineId",
        to = "super::baseline::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Baseline,
    #[sea_orm(
        belongs_to = "super::clients::Entity",
        from = "Column::Uuid",
        to = "super::clients::Column::Uuid",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Clients,
}

impl Related<super::baseline::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Baseline.def()
    }
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
